<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	   					http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    					http://www.springframework.org/schema/context
    					http://www.springframework.org/schema/context/spring-context-4.0.xsd
    					http://www.springframework.org/schema/tx
    					http://www.springframework.org/schema/tx/spring-tx-4.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	 <!--加载数据资源属性文件 -->
	       
	        <bean id="propertyConfigurer"
	        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	        <property name="location" value="classpath:jdbc.properties" />
	        </bean>


	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">  
             <property name="driverClassName" value="${driver}" />  
             <property name="url" value="${url}"/>  
             <property name="username" value="${username}"/>  
            <property name="password" value="${password}"/> 
     </bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
	</bean>

	<!-- Mapper接口所在包名，Spring会自动查找其下的Mapper -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>


	<!-- 对数据源进行事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />
	<tx:annotation-driven mode="proxy"
		transaction-manager="transactionManager" />

	<!-- 配置事务通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">

		<!-- 配置哪些方法需要哪些事务，配置事务的传播特性 -->
		<tx:attributes>
			<!-- 对add,update,delete 开头的方法进行事务管理,只要有异常就回滚 -->
			<tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>

			<!-- 读取数据，开启只读，提高数据的查询效率 -->
			<tx:method name="get*" read-only="true"/>
			<tx:method name="list*" read-only="true"/>

			<!--  对其他方法 使用默认的事务管理  -->
			<tx:method name="*"/>
		</tx:attributes>

	</tx:advice>

	<aop:config>
		<aop:pointcut id="pointcut" expression="execution(* com.serviceImpl.*.*(..))"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut"/>
	</aop:config>

</beans>
